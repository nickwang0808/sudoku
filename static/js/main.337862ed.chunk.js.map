{"version":3,"sources":["utilities/hasDuplicates.ts","utilities/transformInitialBoard.ts","store.tsx","data/initialBoard.ts","algorism/validateBoard.ts","algorism/solveBoard.js","components/Cell.tsx","components/Row.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["hasDuplicates","input","removeEmptyCells","filter","n","deDuplicated","Array","from","Set","length","transformInitialBoard","initialBoard","map","row","c","isEditable","value","String","BOARD","sample","initialState","board","handleSetBoard","status","isComplete","isValid","handleValidateBoard","resetBoard","handleSolveSudoku","AppContext","createContext","BoardProvider","children","useState","setBoard","setStatus","deTransformBoard","Number","index","col","includes","topRowChunked","chunk","midRowChunked","botRowChunked","block1","block2","block3","flat","isBoardValid","useEffect","Provider","prev","tempBoard","cloneDeep","solvedBoard","puzzle","solve","split","e","solveSudoku","alert","Cell","cell","position","useContext","StyledCellWithInput","showBoldBorder","type","maxLength","onChange","target","newValue","StyledCellBase","disabled","styled","css","Row","rowIndex","StyledRow","i","div","App","StyledContainer","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAAe,SAASA,EAAcC,GACpC,IAAMC,EAAmB,SAACD,GACxB,OAAOA,EAAME,QAAO,SAACC,GAAD,OAAa,IAANA,MAGvBC,EAAeC,MAAMC,KAAK,IAAIC,IAAIN,EAAiBD,KACzD,OAAIC,EAAiBD,GAAOQ,SAAWJ,EAAaI,OCCvC,SAASC,EACtBC,GAEA,OAAOA,EAAaC,KAAI,SAACC,GAAD,OACtBA,EAAID,KAAI,SAACE,GAAD,MAAQ,CACdC,WAAkB,IAAND,EACZE,MAAa,IAANF,EAAU,GAAKG,OAAOH,U,iBCM7BI,EAAQC,ICnBe,CAC3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAE3B,CACE,CAAC,EAAG,EAAG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","file":"static/js/main.337862ed.chunk.js","sourcesContent":["export default function hasDuplicates(input: number[]) {\n  const removeEmptyCells = (input: number[]) => {\n    return input.filter((n) => n !== 0);\n  };\n\n  const deDuplicated = Array.from(new Set(removeEmptyCells(input)));\n  if (removeEmptyCells(input).length === deDuplicated.length) {\n    return false;\n  }\n  return true;\n}\n","export interface ICell {\n  isEditable: boolean;\n  value: string;\n}\n\n/* transform the board into workable data table, isEditable is used to determine if the cell\ncan be edited by user, store user input in value, and use possibleValue to store notes */\nexport default function transformInitialBoard(\n  initialBoard: number[][]\n): ICell[][] {\n  return initialBoard.map((row) =>\n    row.map((c) => ({\n      isEditable: c === 0 ? true : false,\n      value: c === 0 ? \"\" : String(c),\n    }))\n  );\n}\n","import cloneDeep from \"lodash.clonedeep\";\nimport sample from \"lodash.sample\";\nimport { createContext, ReactNode, useEffect, useState } from \"react\";\nimport solveSudoku from \"./algorism/solveBoard.js\";\nimport isBoardValid from \"./algorism/validateBoard\";\nimport { initialBoards } from \"./data/initialBoard\";\nimport transformInitialBoard, {\n  ICell,\n} from \"./utilities/transformInitialBoard\";\n\ninterface IStore {\n  board: ICell[][];\n  status: ReturnType<typeof isBoardValid>;\n  handleSetBoard: (position: number[], value: string) => void;\n  handleValidateBoard: () => void;\n  resetBoard: () => void;\n  handleSolveSudoku: () => void;\n}\n\nconst BOARD = sample(initialBoards)!;\nconst initialState: IStore = {\n  board: transformInitialBoard(BOARD),\n  handleSetBoard: () => {},\n  status: {\n    isComplete: false,\n    isValid: true,\n  },\n  handleValidateBoard: () => {},\n  resetBoard: () => {},\n  handleSolveSudoku: () => {},\n};\n\nexport const AppContext = createContext<IStore>(initialState);\n\nexport default function BoardProvider({ children }: { children: ReactNode }) {\n  const [board, setBoard] = useState<IStore[\"board\"]>(initialState.board);\n\n  const [status, setStatus] = useState<IStore[\"status\"]>(initialState.status);\n\n  const handleSetBoard: IStore[\"handleSetBoard\"] = ([row, col], value) => {\n    // console({ value });\n\n    setBoard((prev) => {\n      /* without redux, we have to manually manage deep cloning objects, in real world app,\n      we should avoid useState with deep trees */\n      const tempBoard = cloneDeep(prev);\n      tempBoard[row][col].value = value;\n      return tempBoard;\n    });\n  };\n\n  const handleValidateBoard = () => {\n    // run validate board\n    const deTransformBoard = board.map((row) =>\n      row.map(({ value }) => (value !== \"\" ? Number(value) : 0))\n    );\n    setStatus(isBoardValid(deTransformBoard));\n  };\n\n  const handleSolveSudoku = () => {\n    const deTransformBoard = board.map((row) =>\n      row.map(({ value }) => (value ? Number(value) : 0))\n    );\n    try {\n      const solvedBoard = solveSudoku(deTransformBoard);\n      setBoard(transformInitialBoard(solvedBoard));\n    } catch {\n      alert(\"board could not be solved, try resetting it\");\n    }\n  };\n\n  useEffect(() => {\n    // console(\"board changed\");\n    handleValidateBoard();\n  }, [board]);\n\n  const resetBoard = () => setBoard(transformInitialBoard(BOARD));\n\n  return (\n    <AppContext.Provider\n      value={{\n        board,\n        status,\n        handleSetBoard,\n        handleValidateBoard,\n        resetBoard,\n        handleSolveSudoku,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n}\n","export const initialBoards = [\n  [\n    [8, 5, 6, 0, 1, 4, 7, 3, 0],\n    [0, 9, 0, 0, 0, 0, 0, 0, 0],\n    [2, 4, 0, 0, 0, 0, 1, 6, 0],\n    [0, 6, 2, 0, 5, 9, 3, 0, 0],\n    [0, 3, 1, 8, 0, 2, 4, 5, 0],\n    [0, 0, 5, 3, 4, 0, 9, 2, 0],\n    [0, 2, 4, 0, 0, 0, 0, 7, 3],\n    [0, 0, 0, 0, 0, 0, 0, 1, 0],\n    [0, 1, 8, 6, 3, 0, 2, 9, 4],\n  ],\n  [\n    [4, 0, 0, 0, 5, 0, 8, 0, 0],\n    [0, 7, 6, 9, 3, 0, 0, 0, 2],\n    [5, 0, 0, 0, 0, 2, 0, 7, 6],\n    [0, 1, 8, 7, 0, 0, 0, 0, 3],\n    [0, 0, 5, 0, 0, 0, 1, 9, 8],\n    [0, 0, 0, 1, 9, 8, 0, 0, 0],\n    [6, 9, 0, 0, 8, 0, 2, 0, 0],\n    [2, 0, 0, 0, 1, 9, 0, 5, 0],\n    [0, 0, 0, 0, 0, 0, 3, 8, 9],\n  ],\n  [\n    [0, 3, 4, 0, 2, 7, 0, 5, 1],\n    [0, 1, 0, 0, 0, 0, 4, 0, 0],\n    [0, 0, 0, 0, 3, 1, 0, 0, 0],\n    [7, 9, 8, 0, 5, 0, 2, 0, 0],\n    [5, 0, 3, 2, 0, 0, 7, 0, 0],\n    [0, 2, 1, 7, 0, 3, 0, 8, 5],\n    [0, 8, 0, 5, 0, 0, 1, 0, 0],\n    [0, 7, 0, 0, 0, 0, 0, 4, 0],\n    [0, 0, 5, 1, 7, 0, 0, 0, 8],\n  ],\n  [\n    [0, 0, 1, 9, 2, 0, 0, 5, 0],\n    [0, 0, 2, 0, 5, 6, 7, 0, 1],\n    [0, 0, 3, 7, 0, 0, 9, 0, 0],\n    [0, 9, 7, 3, 6, 0, 4, 1, 0],\n    [5, 0, 0, 0, 1, 0, 0, 0, 0],\n    [0, 1, 6, 0, 0, 0, 0, 0, 3],\n    [0, 0, 0, 0, 3, 2, 0, 0, 5],\n    [0, 6, 0, 1, 9, 8, 0, 0, 7],\n    [0, 0, 8, 5, 7, 0, 0, 0, 0],\n  ],\n  [\n    [3, 0, 0, 1, 0, 7, 0, 5, 0],\n    [0, 0, 6, 0, 0, 4, 0, 2, 0],\n    [5, 0, 0, 0, 3, 0, 0, 0, 0],\n    [0, 0, 0, 8, 2, 0, 0, 0, 0],\n    [0, 0, 4, 0, 1, 3, 5, 9, 2],\n    [2, 1, 0, 5, 0, 9, 0, 0, 0],\n    [0, 9, 0, 3, 0, 8, 1, 0, 0],\n    [0, 0, 5, 0, 9, 1, 0, 0, 0],\n    [1, 3, 0, 4, 0, 5, 2, 0, 9],\n  ],\n  [\n    [0, 1, 4, 9, 0, 8, 0, 0, 2],\n    [0, 0, 0, 0, 0, 0, 8, 7, 1],\n    [0, 0, 5, 0, 0, 0, 9, 3, 0],\n    [0, 0, 0, 3, 0, 4, 0, 0, 5],\n    [0, 0, 3, 8, 1, 0, 7, 0, 0],\n    [0, 2, 1, 0, 9, 5, 3, 0, 0],\n    [0, 8, 0, 4, 0, 6, 1, 2, 0],\n    [0, 4, 7, 1, 0, 9, 5, 6, 0],\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\n  ],\n  [\n    [0, 0, 4, 3, 0, 0, 0, 0, 8],\n    [9, 5, 8, 0, 2, 0, 7, 0, 3],\n    [0, 0, 0, 9, 0, 8, 4, 2, 0],\n    [0, 9, 0, 7, 0, 0, 0, 0, 0],\n    [0, 7, 0, 8, 3, 2, 1, 9, 0],\n    [0, 0, 2, 0, 0, 0, 8, 7, 0],\n    [0, 0, 0, 0, 9, 0, 0, 0, 7],\n    [3, 0, 0, 1, 8, 0, 6, 0, 0],\n    [0, 4, 0, 6, 0, 0, 2, 8, 0],\n  ],\n  [\n    [6, 1, 4, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 6, 5, 3, 0, 0, 0],\n    [0, 5, 0, 0, 0, 1, 0, 8, 0],\n    [8, 0, 0, 3, 7, 0, 1, 6, 0],\n    [0, 7, 6, 0, 0, 9, 3, 2, 0],\n    [2, 0, 0, 0, 0, 4, 8, 0, 0],\n    [0, 0, 0, 2, 0, 0, 6, 5, 0],\n    [0, 0, 0, 0, 3, 0, 4, 1, 9],\n    [3, 0, 9, 1, 4, 0, 0, 0, 8],\n  ],\n];\n","import { chunk } from \"lodash\";\nimport hasDuplicates from \"../utilities/hasDuplicates\";\n\n// check for row, col and block for duplicates, if none then pass\nexport default function isBoardValid(board: number[][]) {\n  let isValid = true;\n  let isComplete = true;\n\n  for (let index = 0; index < board.length; index++) {\n    const row = board[index];\n    const col = board.map((row) => row[index]);\n    // check if therea are 0s in the board\n    if (col.includes(0) || row.includes(0)) {\n      isComplete = false;\n    }\n    if (hasDuplicates(row) || hasDuplicates(col)) {\n      isValid = false;\n      break;\n    }\n    // check blocks for dupes\n    // when we are at defined starting point, build blocks and validate them\n    const blockStartIndex = [0, 3, 6];\n    if (blockStartIndex.includes(index)) {\n      // chunk the rows into 3s\n      const topRowChunked = chunk(board[index], 3);\n      const midRowChunked = chunk(board[index + 1], 3);\n      const botRowChunked = chunk(board[index + 2], 3);\n\n      const block1 = [topRowChunked[0], midRowChunked[0], botRowChunked[0]];\n      const block2 = [topRowChunked[1], midRowChunked[1], botRowChunked[1]];\n      const block3 = [topRowChunked[2], midRowChunked[2], botRowChunked[2]];\n      if (\n        hasDuplicates(block1.flat()) ||\n        hasDuplicates(block2.flat()) ||\n        hasDuplicates(block3.flat())\n      ) {\n        isValid = false;\n        break;\n      }\n    }\n  }\n\n  return { isValid, isComplete };\n}\n","import solve from \"@mattflow/sudoku-solver\";\nimport { chunk } from \"lodash\";\nexport default function solveSudoku(board) {\n  const puzzle = board.flat().flat();\n  const solution = chunk(\n    chunk(\n      solve(puzzle)\n        .split(\"\")\n        .map((e) => Number(e)),\n      9\n    ),\n    9\n  ).flat();\n\n  return solution;\n}\n","import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport React, { useContext } from \"react\";\nimport { AppContext } from \"../store\";\nimport { ICell } from \"../utilities/transformInitialBoard\";\n\ninterface IProps {\n  cell: ICell;\n  position: number[];\n}\n\nexport default function Cell({\n  cell: { isEditable, value },\n  position,\n}: IProps) {\n  const { handleSetBoard } = useContext(AppContext);\n\n  const handleSetInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    const newValue = Number(value);\n    const range = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    if (!range.includes(newValue)) {\n      handleSetBoard(position, \"\");\n      return;\n    }\n    handleSetBoard(position, value);\n  };\n\n  if (!isEditable) {\n    return (\n      <StyledCellBase\n        showBoldBorder={position[1] === 3 || position[1] === 6}\n        value={value}\n        disabled\n      />\n    );\n  }\n  return (\n    <StyledCellWithInput\n      showBoldBorder={position[1] === 3 || position[1] === 6}\n      value={value}\n      type=\"text\"\n      maxLength={1}\n      onChange={handleSetInput}\n    />\n  );\n}\n\nconst StyledCellBase = styled.input<{ showBoldBorder: boolean }>`\n  height: 3rem;\n  width: 3rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  border: 1px solid grey;\n  font-size: 2rem;\n  text-align: center;\n  color: #5353b4;\n\n  ${({ showBoldBorder }) =>\n    showBoldBorder &&\n    css`\n      border-left: 5px solid grey;\n    `}\n`;\n\nconst StyledCellWithInput = styled(StyledCellBase)`\n  color: unset;\n`;\n","import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport React from \"react\";\nimport { ICell } from \"../utilities/transformInitialBoard\";\nimport Cell from \"./Cell\";\n\ninterface IProps {\n  row: ICell[];\n  rowIndex: number;\n}\n\nexport default function Row({ row, rowIndex }: IProps) {\n  return (\n    <StyledRow showBoldBorder={rowIndex === 3 || rowIndex === 6}>\n      {row.map((cell, i) => (\n        // we keep track of the position by assigning an unique string \"row,column\" with the index\n        <Cell cell={cell} position={[rowIndex, i]} key={`${rowIndex},${i}`} />\n      ))}\n    </StyledRow>\n  );\n}\n\nconst StyledRow = styled.div<{ showBoldBorder: boolean }>`\n  display: flex;\n  ${({ showBoldBorder }) =>\n    showBoldBorder &&\n    css`\n      border-top: 5px solid grey;\n    `}\n`;\n","import styled from \"@emotion/styled\";\nimport React, { useContext } from \"react\";\nimport \"./App.css\";\nimport Row from \"./components/Row\";\nimport { AppContext } from \"./store\";\n\nexport default function App() {\n  const {\n    board,\n    status: { isComplete, isValid },\n    resetBoard,\n    handleSolveSudoku,\n  } = useContext(AppContext);\n\n  return (\n    <StyledContainer>\n      <h3>{`Board is ${isValid ? \"valid\" : \"invalid\"} and ${\n        isComplete ? \"complete\" : \"incomplete\"\n      }`}</h3>\n      {board.map((row, i) => (\n        <Row row={row} key={i} rowIndex={i} />\n      ))}\n      <button onClick={resetBoard}>Reset</button>\n      <button onClick={handleSolveSudoku}>Help me</button>\n    </StyledContainer>\n  );\n}\n\nconst StyledContainer = styled.div`\n  width: 27rem;\n  height: 27rem;\n  margin: auto;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport BoardProvider from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BoardProvider>\n      <App />\n    </BoardProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(// console))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}